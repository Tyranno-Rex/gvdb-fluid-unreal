# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.24)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS gvdb gvdbPTX)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target gvdb
add_library(gvdb SHARED IMPORTED)

set_target_properties(gvdb PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GLEW_STATIC;CUDA_GVDB_COPYDATA_PTX=\"cuda_gvdb_copydata.ptx\";CUDA_GVDB_MODULE_PTX=\"cuda_gvdb_module.ptx\""
  INTERFACE_INCLUDE_DIRECTORIES "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2/include;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels"
  INTERFACE_LINK_LIBRARIES "opengl32;glu32;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2/lib/x64/cuda.lib"
  INTERFACE_SOURCES "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/app_perf.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_allocator.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_camera.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_cutils.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_model.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_node.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_render.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_scene.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_types.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_vec.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_volume_3D.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_volume_base.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/gvdb_volume_gvdb.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/loader_ObjarReader.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/loader_OBJReader.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/loader_Parser.h;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/src/string_helper.h"
)

# Create imported target gvdbPTX
add_library(gvdbPTX OBJECT IMPORTED)

set_target_properties(gvdbPTX PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels"
  INTERFACE_SOURCES "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_dda.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_geom.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_nodes.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_operators.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_particles.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_raycast.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_gvdb_scene.cuh;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/kernels/cuda_math.cuh"
)

# Import target "gvdb" for configuration "Debug"
set_property(TARGET gvdb APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(gvdb PROPERTIES
  IMPORTED_IMPLIB_DEBUG "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/Debug/gvdb.lib"
  IMPORTED_LOCATION_DEBUG "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/Debug/gvdb.dll"
  )

# Import target "gvdbPTX" for configuration "Debug"
set_property(TARGET gvdbPTX APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(gvdbPTX PROPERTIES
  IMPORTED_COMMON_LANGUAGE_RUNTIME_DEBUG ""
  IMPORTED_OBJECTS_DEBUG "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/Debug/cuda_gvdb_copydata.ptx;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/Debug/cuda_gvdb_module.ptx"
  )

# Import target "gvdb" for configuration "Release"
set_property(TARGET gvdb APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(gvdb PROPERTIES
  IMPORTED_IMPLIB_RELEASE "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/Release/gvdb.lib"
  IMPORTED_LOCATION_RELEASE "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/Release/gvdb.dll"
  )

# Import target "gvdbPTX" for configuration "Release"
set_property(TARGET gvdbPTX APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(gvdbPTX PROPERTIES
  IMPORTED_COMMON_LANGUAGE_RUNTIME_RELEASE ""
  IMPORTED_OBJECTS_RELEASE "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/Release/cuda_gvdb_copydata.ptx;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/Release/cuda_gvdb_module.ptx"
  )

# Import target "gvdb" for configuration "MinSizeRel"
set_property(TARGET gvdb APPEND PROPERTY IMPORTED_CONFIGURATIONS MINSIZEREL)
set_target_properties(gvdb PROPERTIES
  IMPORTED_IMPLIB_MINSIZEREL "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/MinSizeRel/gvdb.lib"
  IMPORTED_LOCATION_MINSIZEREL "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/MinSizeRel/gvdb.dll"
  )

# Import target "gvdbPTX" for configuration "MinSizeRel"
set_property(TARGET gvdbPTX APPEND PROPERTY IMPORTED_CONFIGURATIONS MINSIZEREL)
set_target_properties(gvdbPTX PROPERTIES
  IMPORTED_COMMON_LANGUAGE_RUNTIME_MINSIZEREL ""
  IMPORTED_OBJECTS_MINSIZEREL "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/MinSizeRel/cuda_gvdb_copydata.ptx;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/MinSizeRel/cuda_gvdb_module.ptx"
  )

# Import target "gvdb" for configuration "RelWithDebInfo"
set_property(TARGET gvdb APPEND PROPERTY IMPORTED_CONFIGURATIONS RELWITHDEBINFO)
set_target_properties(gvdb PROPERTIES
  IMPORTED_IMPLIB_RELWITHDEBINFO "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/RelWithDebInfo/gvdb.lib"
  IMPORTED_LOCATION_RELWITHDEBINFO "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/RelWithDebInfo/gvdb.dll"
  )

# Import target "gvdbPTX" for configuration "RelWithDebInfo"
set_property(TARGET gvdbPTX APPEND PROPERTY IMPORTED_CONFIGURATIONS RELWITHDEBINFO)
set_target_properties(gvdbPTX PROPERTIES
  IMPORTED_COMMON_LANGUAGE_RUNTIME_RELWITHDEBINFO ""
  IMPORTED_OBJECTS_RELWITHDEBINFO "C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/RelWithDebInfo/cuda_gvdb_copydata.ptx;C:/Users/lutca/unreal_project/UE_GVDB/GVDB_Library/build/gvdbPTX.dir/RelWithDebInfo/cuda_gvdb_module.ptx"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
